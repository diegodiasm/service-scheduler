/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface;

import controller.Controller;
import model.Connector;

/**
 *
 * @author Diego Dias
 */
public class ConfigurarUI extends javax.swing.JFrame {
    private static final long serialVersionUID = 1L;

    /**
     * Creates new form ConfigurarUI
     */
    public ConfigurarUI(Connector con) {
        
        setCon(con);
        Controller ctrl = Controller.getInstance();
        initComponents();
        
        // Define icone da aplicacao
        ctrl.frAnyFrameSetIconImage(this);
        // Adiciona abas
        jTabbedPaneConfigurarUI.addTab("Banco de Dados", pnConfDbPanel);
        jTabbedPaneConfigurarUI.addTab("Atendentes",pnAddServersPanel);
        jTabbedPaneConfigurarUI.addTab("Alteração de Expediente", pnTimeRestrictions);
        jTabbedPaneConfigurarUI.addTab("Usuários",pnUsuarios);
        jTabbedPaneConfigurarUI.addTab("Atendimentos Realizados", pnAtendimentos);
        jTabbedPaneConfigurarUI.addTab("Estatísticas",pnStatisticsPanel);
        jTabbedPaneConfigurarUI.addTab("Ajuda", pnAjuda);
        setLocationRelativeTo(null);       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneConfigurarUI = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PhotoScheduler - Configuração");

        jTabbedPaneConfigurarUI.setName(""); // NOI18N
        jTabbedPaneConfigurarUI.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneConfigurarUIStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 597, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPaneConfigurarUI, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 326, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPaneConfigurarUI, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPaneConfigurarUIStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPaneConfigurarUIStateChanged
        if (jTabbedPaneConfigurarUI.getTitleAt(jTabbedPaneConfigurarUI.
            getSelectedIndex()).equals("Atendentes")) {
            Controller ctrl = Controller.getInstance();
            ctrl.frAddServersUIRefreshTable((AddServersUI) jTabbedPaneConfigurarUI.getSelectedComponent());
        }
    }//GEN-LAST:event_jTabbedPaneConfigurarUIStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConfigurarUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConfigurarUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConfigurarUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConfigurarUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConfigurarUI(con).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPaneConfigurarUI;
    // End of variables declaration//GEN-END:variables
    private static Connector con;
    // Instancia abas!
    private AddServersUI pnAddServersPanel = new AddServersUI();
    private StatisticsUI pnStatisticsPanel = new StatisticsUI();
    private ConfDbUI pnConfDbPanel = new ConfDbUI();
    private TimeRestrictionUI pnTimeRestrictions = new TimeRestrictionUI(); 
    private UsuariosUI pnUsuarios = new UsuariosUI();
    private AtendimentosRealizadosUI pnAtendimentos = new AtendimentosRealizadosUI();
    private AjudaUI pnAjuda = new AjudaUI();
    

    /**
     * @return the con
     */
    public Connector getCon() {
        return con;
    }

    /**
     * @param con the con to set
     */
    public void setCon(Connector con) {
        ConfigurarUI.con = con;
    }

    /**
     * @return the pnAddServersPanel
     */
    public AddServersUI getPnAddServersPanel() {
        return pnAddServersPanel;
    }

    /**
     * @return the pnConfDbPanel
     */
    public ConfDbUI getPnConfDbPanel() {
        return pnConfDbPanel;
    }

    /**
     * @return the pnTimeRestrictions
     */
    public TimeRestrictionUI getPnTimeRestrictions() {
        return pnTimeRestrictions;
    }

    /**
     * @return the pnUsuarios
     */
    public UsuariosUI getPnUsuarios() {
        return pnUsuarios;
    }

    /**
     * @return the pnAtendimentos
     */
    public AtendimentosRealizadosUI getPnAtendimentos() {
        return pnAtendimentos;
    }

    /**
     * @return the pnAjuda
     */
    public AjudaUI getPnAjuda() {
        return pnAjuda;
    }


    
}
