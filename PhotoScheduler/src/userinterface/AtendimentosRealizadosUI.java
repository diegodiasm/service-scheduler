/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface;

import controller.Controller;
import java.awt.print.PrinterException;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Diego Dias
 */
public class AtendimentosRealizadosUI extends javax.swing.JPanel {

    /**
     * Creates new form AtendimentosRealizadosUI
     */
    public AtendimentosRealizadosUI() {
        Controller ctrl = Controller.getInstance();

        initComponents();
        ctrl.frAtendimentosRealizadosCreateTable(this);
        ctrl.frAtendimentosRealizadosRefreshTable(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spTbAtendimentosRealizados = new javax.swing.JScrollPane();
        tbAtendimentosRealizados = new javax.swing.JTable() {

            private static final long serialVersionUID = 1L;
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        btDeletarSelecionados = new javax.swing.JButton();
        btImprimir = new javax.swing.JButton();

        tbAtendimentosRealizados.setModel(atendimentosRealizadosModel);
        tbAtendimentosRealizados.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        spTbAtendimentosRealizados.setViewportView(tbAtendimentosRealizados);
        tbAtendimentosRealizados.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        btDeletarSelecionados.setText("Deletar Selecionados");
        btDeletarSelecionados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeletarSelecionadosActionPerformed(evt);
            }
        });

        btImprimir.setText("Imprimir");
        btImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spTbAtendimentosRealizados, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btDeletarSelecionados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btImprimir)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(spTbAtendimentosRealizados, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btDeletarSelecionados)
                    .addComponent(btImprimir))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btDeletarSelecionadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeletarSelecionadosActionPerformed
        if (getTbAtendimentosRealizados().getSelectedRowCount() > 0) {

            Controller ctrl = Controller.getInstance();
            int line = Math.max(getTbAtendimentosRealizados().getSelectedRow(), 1);
            ctrl.frAtendimentosRealizadosBtExcluir(this);
            ctrl.frAtendimentosRealizadosRefreshTable(this);
            if (getTbAtendimentosRealizados().getRowCount() > 0) {
                getTbAtendimentosRealizados().requestFocus();
                getTbAtendimentosRealizados().setRowSelectionInterval(line - 1, line - 1);
            }
        }
    }//GEN-LAST:event_btDeletarSelecionadosActionPerformed

    private void btImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImprimirActionPerformed
        MessageFormat header = new MessageFormat("Atendimentos Realizados");
        
        MessageFormat footer = new MessageFormat("PÃ¡gina {0}");
        try {

            getTbAtendimentosRealizados().print(JTable.PrintMode.FIT_WIDTH, header, footer);
        } catch (PrinterException ex) {
            Logger.getLogger(ServersStatisticsUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btImprimirActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDeletarSelecionados;
    private javax.swing.JButton btImprimir;
    private javax.swing.JScrollPane spTbAtendimentosRealizados;
    private javax.swing.JTable tbAtendimentosRealizados;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel atendimentosRealizadosModel = new DefaultTableModel();

    /**
     * @return the tbAtendimentosRealizados
     */
    public javax.swing.JTable getTbAtendimentosRealizados() {
        return tbAtendimentosRealizados;
    }

    /**
     * @return the atendimentosRealizadosModel
     */
    public DefaultTableModel getAtendimentosRealizadosModel() {
        return atendimentosRealizadosModel;
    }

    public int[] getSelectedAtendimentoId() {

        int[] atendimentoId;
        atendimentoId = new int[getTbAtendimentosRealizados().getSelectedRowCount()];

        int row;

        for (int i = 0; i < atendimentoId.length; i++) {

            row = getTbAtendimentosRealizados().getSelectedRows()[i];
            atendimentoId[i] = Integer.parseInt(getAtendimentosRealizadosModel().
                    getValueAt(row, getAtendimentosRealizadosModel().
                    findColumn("ID")).
                    toString());
        }

        return (atendimentoId);
    }
}
